package com.example.controller;import com.example.dto.ApiResponse;import com.example.dto.AttachDTO;import com.example.dto.ProfileDTO;import com.example.service.ProfileService;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.tags.Tag;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping("/api/v1/profile")@Tag(name = "Profile âš™", description = "Profile api list.")public class ProfileController {    @Autowired    private ProfileService profileService;    @PreAuthorize("hasAnyRole('ROLE_ADMIN')")    @PostMapping("/admin/create")    @Operation(summary = "Create profile", description = "This api used for create profile.")    public ResponseEntity<ApiResponse> create(@RequestBody ProfileDTO dto) {        return ResponseEntity.status(HttpStatus.CREATED).body(profileService.create(dto));    }    @PutMapping(value = "/user/update/detail/{profileId}")    @Operation(summary = "Update profile", description = "This api used for update profile.")    public ResponseEntity<ApiResponse> updateDetail(@PathVariable Integer profileId,                                          @RequestBody ProfileDTO dto) {        return ResponseEntity.ok().body(profileService.updateDetail(profileId, dto));    }    @PutMapping(value = "/user/update/email")    @Operation(summary = "Update email", description = "This api used for update email.")    public ResponseEntity<ApiResponse> updateEmail(@RequestParam("email") String email) {        return ResponseEntity.ok().body(profileService.updateEmail(email));    }    @PutMapping("/user/update/password")    @Operation(summary = "Change password", description = "This api used for change password.")    public ResponseEntity<ApiResponse> changePassword(@RequestParam("newPassword") String newPassword){        return ResponseEntity.ok().body(profileService.changePassword(newPassword));    }    @GetMapping("/user/get/detail")    @Operation(summary = "Get details", description = "This api used for get profile details.")    public ResponseEntity<ApiResponse> getDetail() {        return ResponseEntity.ok().body(profileService.getDetail());    }    @PutMapping("/user/update-photo/{profileId}")    @Operation(summary = "Update attach", description = "This api used for update profile attach.")    public ResponseEntity<ApiResponse> updateAttach(@PathVariable Integer profileId,                                          @RequestBody AttachDTO dto) {        return ResponseEntity.ok().body(profileService.updateAttach(profileId, dto));    }}